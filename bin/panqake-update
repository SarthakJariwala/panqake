#!/bin/bash
# Update branches in the stack after changes

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
source "$SCRIPT_DIR/../lib/common.sh"

usage() {
  echo "Usage: panqake-update [branch-name]"
  echo "  Updates all branches above the specified branch in the stack"
  echo "  [branch-name]: Optional branch to start from (defaults to current branch)"
  exit 1
}

# If no branch specified, use current branch
TARGET_BRANCH="${1:-$(get_current_branch)}"

# Check if target branch exists
if ! branch_exists "$TARGET_BRANCH"; then
  echo "Error: Branch '$TARGET_BRANCH' does not exist"
  exit 1
fi

# Store current branch to return to it later
CURRENT_BRANCH=$(get_current_branch)

# Function to recursively update child branches
update_branch_and_children() {
  local branch="$1"
  local children=$(get_child_branches "$branch")

  if [ -n "$children" ]; then
    while IFS= read -r child; do
      echo "Updating branch '$child' based on changes to '$branch'..."

      # Checkout the child branch
      git checkout "$child"
      if [ $? -ne 0 ]; then
        echo "Error: Failed to checkout branch '$child'"
        git checkout "$CURRENT_BRANCH"
        exit 1
      fi

      # Rebase onto the parent branch
      git rebase "$branch"
      if [ $? -ne 0 ]; then
        echo "Error: Rebase conflict detected in branch '$child'"
        echo "Please resolve conflicts and run 'git rebase --continue'"
        echo "Then run 'panqake-update $child' to continue updating the stack"
        exit 1
      fi

      # Continue with children of this branch
      update_branch_and_children "$child"
    done <<< "$children"
  fi
}

# Start the update process
echo "Starting stack update from branch '$TARGET_BRANCH'..."
update_branch_and_children "$TARGET_BRANCH"

# Return to the original branch
git checkout "$CURRENT_BRANCH"
echo "Stack update complete. Returned to branch '$CURRENT_BRANCH'"
